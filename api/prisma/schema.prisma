// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Otp {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  otp        String
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  @@index([email])
}

model User {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  email            String            @unique
  password         String            @db.VarChar(255)
  username         String            @unique
  bio              String?           @db.VarChar(150)
  profileImage     String            @default("default.jpg")
  notification     String            @default("accept")
  role             Role              @default(USER)

  chatRooms        UserChatRoom[] 
  friends          Friend[]          @relation("UserFriends") 
  friendOf         Friend[]          @relation("FriendUsers") 
  createdChatRooms ChatRoom[]        @relation("CreatorChatRooms")
  messages         Message[]         @relation("UserMessages")

  sentFriendRequests    FriendRequest[] @relation("SenderFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceiverFriendRequests")

  sentMessages     PrivateMessage[]  @relation("SentPrivateMessages") 
  receivedMessages PrivateMessage[]  @relation("ReceivedPrivateMessages") 
}

model Message {
  id         Int      @id @default(autoincrement())
  message    String   @default("")
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  chatRoomId Int
  user       User     @relation(fields: [userId], references: [id], name: "UserMessages", onDelete: Cascade)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], name: "ChatRoomMessages")
}

model PrivateMessage {
  id         Int      @id @default(autoincrement())
  message    String
  image      String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int  
  receiverId Int

  user       User @relation("SentPrivateMessages", fields: [userId], references: [id], onDelete: Cascade)  
  receiver   User @relation("ReceivedPrivateMessages", fields: [receiverId], references: [id], onDelete: Cascade) 

  @@index([userId, receiverId])
}

model ChatRoom {
  id        Int            @id @default(autoincrement())
  name      String
  isPrivate Boolean        @default(false)
  password  String?        @db.VarChar(255)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  createdBy Int
  creator   User           @relation(fields: [createdBy], references: [id], name: "CreatorChatRooms", onDelete: Cascade)
  users     UserChatRoom[]
  messages  Message[]      @relation("ChatRoomMessages")
}

model UserChatRoom {
  userId     Int
  chatRoomId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@id([userId, chatRoomId])
}

model Friend {
  userId   Int
  friendId Int
  user     User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend   User @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([userId, friendId])
  @@unique([userId, friendId])
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())

  sender   User @relation("SenderFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceiverFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum Role {
  USER
  ADMIN
  GUEST
}

